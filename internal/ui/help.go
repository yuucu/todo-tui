package ui

import (
	"strings"

	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
)

// initializeHelpContent initializes the help content for the application
func (m *Model) initializeHelpContent() {
	m.helpContent = []HelpContent{
		{
			Category: "Âü∫Êú¨Êìç‰Ωú",
			Items: []HelpItem{
				{"?", "„Åì„ÅÆ„Éò„É´„Éó„ÇíË°®Á§∫"},
				{"q, Ctrl+C", "„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíÁµÇ‰∫Ü"},
				{"a", "Êñ∞„Åó„ÅÑ„Çø„Çπ„ÇØ„ÇíËøΩÂä†"},
				{"e", "ÈÅ∏Êäû‰∏≠„ÅÆ„Çø„Çπ„ÇØ„ÇíÁ∑®ÈõÜ"},
				{"d", "ÈÅ∏Êäû‰∏≠„ÅÆ„Çø„Çπ„ÇØ„ÇíÂâäÈô§"},
				{"r", "ÂâäÈô§Ê∏à„Åø/ÂÆå‰∫ÜÊ∏à„Åø„Çø„Çπ„ÇØ„ÇíÂæ©ÂÖÉ"},
			},
		},
		{
			Category: "„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥",
			Items: []HelpItem{
				{"Tab", "„Éö„Ç§„É≥Èñì„ÇíÂàá„ÇäÊõø„Åà"},
				{"h", "Â∑¶„Éö„Ç§„É≥Ôºà„Éï„Ç£„É´„ÇøÔºâ„Å´ÁßªÂãï"},
				{"l", "Âè≥„Éö„Ç§„É≥Ôºà„Çø„Çπ„ÇØÔºâ„Å´ÁßªÂãï"},
				{"j, ‚Üì", "‰∏ã„Å´ÁßªÂãï"},
				{"k, ‚Üë", "‰∏ä„Å´ÁßªÂãï"},
				{"Enter", "„Éï„Ç£„É´„Çø„ÇíÈÅ©Áî®/„Çø„Çπ„ÇØ„ÇíÂÆå‰∫Ü"},
			},
		},
		{
			Category: "„Çø„Çπ„ÇØÊìç‰Ωú",
			Items: []HelpItem{
				{"p", "ÂÑ™ÂÖàÂ∫¶„ÇíÂàá„ÇäÊõø„Åà"},
				{"t", "ÊúüÈôê„Çí‰ªäÊó•„Å´Ë®≠ÂÆö/Ëß£Èô§"},
			},
		},
		{
			Category: "ÂÖ•Âäõ„É¢„Éº„Éâ",
			Items: []HelpItem{
				{"Ctrl+C", "ÂÖ•Âäõ„Çí„Ç≠„É£„É≥„Çª„É´"},
				{"Enter, Ctrl+S", "„Çø„Çπ„ÇØ„Çí‰øùÂ≠ò"},
			},
		},
		{
			Category: "ÂâäÈô§Á¢∫Ë™ç„É¢„Éº„Éâ",
			Items: []HelpItem{
				{"y, Y", "ÂâäÈô§„ÇíÂÆüË°å"},
				{"n, N, Esc, Ctrl+C", "ÂâäÈô§„Çí„Ç≠„É£„É≥„Çª„É´"},
			},
		},
	}
}

// renderHelpView renders the help screen
func (m *Model) renderHelpView() string {
	if len(m.helpContent) == 0 {
		m.initializeHelpContent()
	}

	var b strings.Builder

	// Define styles
	headerStyle := lipgloss.NewStyle().
		Foreground(m.currentTheme.Primary).
		Bold(true).
		Padding(0, 1)

	categoryStyle := lipgloss.NewStyle().
		Foreground(m.currentTheme.Secondary).
		Bold(true)

	keyStyle := lipgloss.NewStyle().
		Foreground(m.currentTheme.Warning).
		Bold(true)

	descStyle := lipgloss.NewStyle().
		Foreground(m.currentTheme.Text)

	mutedStyle := lipgloss.NewStyle().
		Foreground(m.currentTheme.TextMuted).
		Italic(true)

	// Header
	b.WriteString(headerStyle.Render("üìö „Ç≠„Éº„Éê„Ç§„É≥„Éá„Ç£„É≥„Ç∞ „Éò„É´„Éó"))
	b.WriteString("\n\n")

	// Content
	for i, category := range m.helpContent {
		if i > 0 {
			b.WriteString("\n")
		}

		// Category header
		b.WriteString(categoryStyle.Render("‚ñ∂ " + category.Category))
		b.WriteString("\n")

		// Category items
		for _, item := range category.Items {
			keyPart := keyStyle.Render(item.Key)
			descPart := descStyle.Render(item.Description)
			b.WriteString("  " + keyPart + " : " + descPart + "\n")
		}
	}

	// Footer
	b.WriteString("\n")
	b.WriteString(mutedStyle.Render("Press any key to close this help..."))

	return b.String()
}

// KeyBinding represents a key binding configuration
type KeyBinding struct {
	Key         string
	Description string
	Mode        mode
	Pane        *pane // nil means any pane
	Handler     func(m *Model) (tea.Model, tea.Cmd)
}

// getKeyBindings returns all key bindings for the application
func (m *Model) getKeyBindings() []KeyBinding {
	return []KeyBinding{
		// Global keys
		{
			Key:         "?",
			Description: "„Éò„É´„Éó„ÇíË°®Á§∫",
			Mode:        modeView,
			Handler: func(m *Model) (tea.Model, tea.Cmd) {
				m.currentMode = modeHelp
				return m, nil
			},
		},
		{
			Key:         "q",
			Description: "„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíÁµÇ‰∫Ü",
			Mode:        modeView,
			Handler: func(m *Model) (tea.Model, tea.Cmd) {
				return m, tea.Quit
			},
		},
		{
			Key:         ctrlCKey,
			Description: "„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíÁµÇ‰∫Ü",
			Mode:        modeView,
			Handler: func(m *Model) (tea.Model, tea.Cmd) {
				return m, tea.Quit
			},
		},

		// Task management keys
		{
			Key:         "a",
			Description: "Êñ∞„Åó„ÅÑ„Çø„Çπ„ÇØ„ÇíËøΩÂä†",
			Mode:        modeView,
			Handler: func(m *Model) (tea.Model, tea.Cmd) {
				m.currentMode = modeAdd
				m.textarea.SetValue("")
				m.textarea.Focus()
				return m, nil
			},
		},
		{
			Key:         "e",
			Description: "ÈÅ∏Êäû‰∏≠„ÅÆ„Çø„Çπ„ÇØ„ÇíÁ∑®ÈõÜ",
			Mode:        modeView,
			Pane:        &[]pane{paneTask}[0],
			Handler: func(m *Model) (tea.Model, tea.Cmd) {
				if m.taskList.selected < len(m.filteredTasks) {
					m.currentMode = modeEdit
					selectedTask := m.filteredTasks[m.taskList.selected]
					for i := 0; i < len(m.tasks); i++ {
						if m.tasks[i].String() == selectedTask.String() {
							m.editingTask = &m.tasks[i]
							break
						}
					}
					if m.editingTask != nil {
						m.textarea.SetValue(m.editingTask.String())
						m.textarea.Focus()
					}
					return m, nil
				}
				return m, nil
			},
		},

		// Navigation keys
		{
			Key:         "tab",
			Description: "„Éö„Ç§„É≥Èñì„ÇíÂàá„ÇäÊõø„Åà",
			Mode:        modeView,
			Handler: func(m *Model) (tea.Model, tea.Cmd) {
				if m.activePane == paneFilter {
					m.activePane = paneTask
				} else {
					m.activePane = paneFilter
				}
				return m, nil
			},
		},
		{
			Key:         "h",
			Description: "Â∑¶„Éö„Ç§„É≥Ôºà„Éï„Ç£„É´„ÇøÔºâ„Å´ÁßªÂãï",
			Mode:        modeView,
			Handler: func(m *Model) (tea.Model, tea.Cmd) {
				m.activePane = paneFilter
				return m, nil
			},
		},
		{
			Key:         "l",
			Description: "Âè≥„Éö„Ç§„É≥Ôºà„Çø„Çπ„ÇØÔºâ„Å´ÁßªÂãï",
			Mode:        modeView,
			Handler: func(m *Model) (tea.Model, tea.Cmd) {
				m.activePane = paneTask
				return m, nil
			},
		},
	}
}
