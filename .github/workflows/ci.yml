name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  GO_VERSION: "1.24"

jobs:
  lint:
    name: Lint & Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 変更検出のため全履歴を取得

    # Goファイルの変更を検出
    - name: Check for Go file changes
      id: go-changes
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          # pushの場合は前のコミットと比較
          if git diff --name-only HEAD~1 HEAD | grep -E '\.(go|mod|sum)$' > /dev/null; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
        else
          # PRの場合はベースブランチと比較
          if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '\.(go|mod|sum)$' > /dev/null; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Set up Go
      if: steps.go-changes.outputs.changed == 'true'
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    # 拡張されたキャッシュ戦略
    - name: Cache Go modules and build cache
      if: steps.go-changes.outputs.changed == 'true'
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
          ~/.cache/golangci-lint
        key: ${{ runner.os }}-go-lint-${{ hashFiles('**/go.sum', '.golangci.yml') }}
        restore-keys: |
          ${{ runner.os }}-go-lint-
          ${{ runner.os }}-go-

    - name: Download dependencies
      if: steps.go-changes.outputs.changed == 'true'
      run: go mod download

    # golangci-lintの高速化設定
    - name: Run golangci-lint (optimized)
      if: steps.go-changes.outputs.changed == 'true'
      uses: golangci/golangci-lint-action@v6
      with:
        version: v1.64  # 安定したバージョンに固定
        args: --timeout=5m --config=.golangci.yml --fast
        skip-cache: false

    - name: Skip lint (no Go changes)
      if: steps.go-changes.outputs.changed == 'false'
      run: echo "No Go files changed, skipping lint"

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run tests with coverage
      id: coverage
      uses: ./.github/actions/test-coverage
      with:
        go-version: ${{ env.GO_VERSION }}
        codecov-token: ${{ secrets.CODECOV_TOKEN }}
        upload-codecov: 'true'
        comment-pr: 'true'

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          # Windows on ARM64 is not commonly used
          - goos: windows
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p bin
        BINARY_NAME=todotui
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        go build -o bin/${BINARY_NAME}-${GOOS}-${GOARCH} ./cmd/todotui

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: todotui-${{ matrix.goos }}-${{ matrix.goarch }}
        path: bin/todotui-${{ matrix.goos }}-${{ matrix.goarch }}*
        retention-days: 30

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Check for vulnerabilities
      uses: golang/govulncheck-action@v1
      with:
        go-version-input: ${{ env.GO_VERSION }}
        go-package: ./... 
