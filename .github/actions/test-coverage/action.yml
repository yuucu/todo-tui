name: 'Run Tests with Coverage'
description: 'Run Go tests and generate coverage reports'

inputs:
  go-version:
    description: 'Go version to use'
    required: false
    default: '1.24'
  upload-codecov:
    description: 'Upload to Codecov'
    required: false
    default: 'true'
  comment-pr:
    description: 'Comment on PR with coverage report'
    required: false
    default: 'false'

outputs:
  coverage-percentage:
    description: 'Coverage percentage'
    value: ${{ steps.coverage.outputs.percentage }}

runs:
  using: 'composite'
  steps:
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download
      shell: bash

    - name: Run tests with coverage
      run: |
        go test -cover ./... -coverprofile=coverage.out.tmp
        cat coverage.out.tmp | grep -v "**_mock.go" | grep -v "wire_gen.go" > coverage.out
        rm coverage.out.tmp
        go tool cover -html=coverage.out -o coverage.html
      shell: bash

    - name: Calculate coverage percentage
      id: coverage
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "Coverage: $COVERAGE%"
      shell: bash

    - name: Upload coverage to Codecov
      if: inputs.upload-codecov == 'true'
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true

    - name: Generate coverage report for PR
      if: inputs.comment-pr == 'true' && github.event_name == 'pull_request'
      run: |
        COVERAGE=${{ steps.coverage.outputs.percentage }}
        
        cat > coverage_report.md << EOF
        ## ðŸ“Š Test Coverage Report
        
        **Coverage:** ${COVERAGE}%
        
        ### Coverage Summary
        \`\`\`
        $(go tool cover -func=coverage.out | tail -n 1)
        \`\`\`
        
        ### Coverage Details
        <details>
        <summary>Click to expand detailed coverage</summary>
        
        \`\`\`
        $(go tool cover -func=coverage.out | head -n 20)
        \`\`\`
        
        </details>
        
        ðŸ“ˆ [View detailed coverage report on Codecov](https://codecov.io/gh/${{ github.repository }}/pull/${{ github.event.number }})
        EOF
      shell: bash

    - name: Comment coverage on PR
      if: inputs.comment-pr == 'true' && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          if (!fs.existsSync('coverage_report.md')) {
            console.log('Coverage report file not found');
            return;
          }
          
          const body = fs.readFileSync('coverage_report.md', 'utf8');
          
          // Find existing coverage comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.data.find(comment => 
            comment.user.login === 'github-actions[bot]' && 
            comment.body.includes('ðŸ“Š Test Coverage Report')
          );
          
          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ github.run_id }}
        path: |
          coverage.out
          coverage.html
        retention-days: 30 